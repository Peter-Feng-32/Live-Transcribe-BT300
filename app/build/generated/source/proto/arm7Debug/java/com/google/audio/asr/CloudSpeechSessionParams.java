// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/audio/asr/cloud_speech_session_params.proto

package com.google.audio.asr;

/**
 * Protobuf type {@code asr.CloudSpeechSessionParams}
 */
public  final class CloudSpeechSessionParams extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:asr.CloudSpeechSessionParams)
    CloudSpeechSessionParamsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CloudSpeechSessionParams.newBuilder() to construct.
  private CloudSpeechSessionParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CloudSpeechSessionParams() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CloudSpeechSessionParams();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CloudSpeechSessionParams(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.audio.asr.CloudSpeechStreamObserverParams.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) != 0)) {
              subBuilder = observerParams_.toBuilder();
            }
            observerParams_ = input.readMessage(com.google.audio.asr.CloudSpeechStreamObserverParams.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(observerParams_);
              observerParams_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            filterProfanity_ = input.readBool();
            break;
          }
          case 26: {
            com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.Builder subBuilder = null;
            if (((bitField0_ & 0x00000004) != 0)) {
              subBuilder = encoderParams_.toBuilder();
            }
            encoderParams_ = input.readMessage(com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(encoderParams_);
              encoderParams_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000004;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.audio.asr.CloudSpeechSessionParams.class, com.google.audio.asr.CloudSpeechSessionParams.Builder.class);
  }

  public interface EncoderParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:asr.CloudSpeechSessionParams.EncoderParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * If the encoder isn't supported, uncompressed audio will be used. When
     * this is false, other EncoderParams fields are ignored.
     * </pre>
     *
     * <code>optional bool enable_encoder = 1 [default = false];</code>
     */
    boolean hasEnableEncoder();
    /**
     * <pre>
     * If the encoder isn't supported, uncompressed audio will be used. When
     * this is false, other EncoderParams fields are ignored.
     * </pre>
     *
     * <code>optional bool enable_encoder = 1 [default = false];</code>
     */
    boolean getEnableEncoder();

    /**
     * <code>optional .audio.CodecAndBitrate codec = 2 [default = OGG_OPUS_BITRATE_32KBPS];</code>
     */
    boolean hasCodec();
    /**
     * <code>optional .audio.CodecAndBitrate codec = 2 [default = OGG_OPUS_BITRATE_32KBPS];</code>
     */
    com.google.audio.CodecAndBitrate getCodec();

    /**
     * <pre>
     * Uses variable bitrate encoding, if available. Currently this is available
     * for OggOpus only.
     * </pre>
     *
     * <code>optional bool allow_vbr = 3 [default = true];</code>
     */
    boolean hasAllowVbr();
    /**
     * <pre>
     * Uses variable bitrate encoding, if available. Currently this is available
     * for OggOpus only.
     * </pre>
     *
     * <code>optional bool allow_vbr = 3 [default = true];</code>
     */
    boolean getAllowVbr();
  }
  /**
   * <pre>
   * Details about how the audio signal should be compressed prior to sending it
   * to the server.
   * </pre>
   *
   * Protobuf type {@code asr.CloudSpeechSessionParams.EncoderParams}
   */
  public  static final class EncoderParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:asr.CloudSpeechSessionParams.EncoderParams)
      EncoderParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EncoderParams.newBuilder() to construct.
    private EncoderParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EncoderParams() {
      codec_ = 32000;
      allowVbr_ = true;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EncoderParams();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EncoderParams(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              enableEncoder_ = input.readBool();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              com.google.audio.CodecAndBitrate value = com.google.audio.CodecAndBitrate.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                codec_ = rawValue;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              allowVbr_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_EncoderParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_EncoderParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.class, com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.Builder.class);
    }

    private int bitField0_;
    public static final int ENABLE_ENCODER_FIELD_NUMBER = 1;
    private boolean enableEncoder_;
    /**
     * <pre>
     * If the encoder isn't supported, uncompressed audio will be used. When
     * this is false, other EncoderParams fields are ignored.
     * </pre>
     *
     * <code>optional bool enable_encoder = 1 [default = false];</code>
     */
    public boolean hasEnableEncoder() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * If the encoder isn't supported, uncompressed audio will be used. When
     * this is false, other EncoderParams fields are ignored.
     * </pre>
     *
     * <code>optional bool enable_encoder = 1 [default = false];</code>
     */
    public boolean getEnableEncoder() {
      return enableEncoder_;
    }

    public static final int CODEC_FIELD_NUMBER = 2;
    private int codec_;
    /**
     * <code>optional .audio.CodecAndBitrate codec = 2 [default = OGG_OPUS_BITRATE_32KBPS];</code>
     */
    public boolean hasCodec() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional .audio.CodecAndBitrate codec = 2 [default = OGG_OPUS_BITRATE_32KBPS];</code>
     */
    public com.google.audio.CodecAndBitrate getCodec() {
      @SuppressWarnings("deprecation")
      com.google.audio.CodecAndBitrate result = com.google.audio.CodecAndBitrate.valueOf(codec_);
      return result == null ? com.google.audio.CodecAndBitrate.OGG_OPUS_BITRATE_32KBPS : result;
    }

    public static final int ALLOW_VBR_FIELD_NUMBER = 3;
    private boolean allowVbr_;
    /**
     * <pre>
     * Uses variable bitrate encoding, if available. Currently this is available
     * for OggOpus only.
     * </pre>
     *
     * <code>optional bool allow_vbr = 3 [default = true];</code>
     */
    public boolean hasAllowVbr() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Uses variable bitrate encoding, if available. Currently this is available
     * for OggOpus only.
     * </pre>
     *
     * <code>optional bool allow_vbr = 3 [default = true];</code>
     */
    public boolean getAllowVbr() {
      return allowVbr_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, enableEncoder_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(2, codec_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, allowVbr_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, enableEncoder_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, codec_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, allowVbr_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.audio.asr.CloudSpeechSessionParams.EncoderParams)) {
        return super.equals(obj);
      }
      com.google.audio.asr.CloudSpeechSessionParams.EncoderParams other = (com.google.audio.asr.CloudSpeechSessionParams.EncoderParams) obj;

      if (hasEnableEncoder() != other.hasEnableEncoder()) return false;
      if (hasEnableEncoder()) {
        if (getEnableEncoder()
            != other.getEnableEncoder()) return false;
      }
      if (hasCodec() != other.hasCodec()) return false;
      if (hasCodec()) {
        if (codec_ != other.codec_) return false;
      }
      if (hasAllowVbr() != other.hasAllowVbr()) return false;
      if (hasAllowVbr()) {
        if (getAllowVbr()
            != other.getAllowVbr()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEnableEncoder()) {
        hash = (37 * hash) + ENABLE_ENCODER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableEncoder());
      }
      if (hasCodec()) {
        hash = (37 * hash) + CODEC_FIELD_NUMBER;
        hash = (53 * hash) + codec_;
      }
      if (hasAllowVbr()) {
        hash = (37 * hash) + ALLOW_VBR_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAllowVbr());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.audio.asr.CloudSpeechSessionParams.EncoderParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Details about how the audio signal should be compressed prior to sending it
     * to the server.
     * </pre>
     *
     * Protobuf type {@code asr.CloudSpeechSessionParams.EncoderParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:asr.CloudSpeechSessionParams.EncoderParams)
        com.google.audio.asr.CloudSpeechSessionParams.EncoderParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_EncoderParams_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_EncoderParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.class, com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.Builder.class);
      }

      // Construct using com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        enableEncoder_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        codec_ = 32000;
        bitField0_ = (bitField0_ & ~0x00000002);
        allowVbr_ = true;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_EncoderParams_descriptor;
      }

      @java.lang.Override
      public com.google.audio.asr.CloudSpeechSessionParams.EncoderParams getDefaultInstanceForType() {
        return com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.audio.asr.CloudSpeechSessionParams.EncoderParams build() {
        com.google.audio.asr.CloudSpeechSessionParams.EncoderParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.audio.asr.CloudSpeechSessionParams.EncoderParams buildPartial() {
        com.google.audio.asr.CloudSpeechSessionParams.EncoderParams result = new com.google.audio.asr.CloudSpeechSessionParams.EncoderParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.enableEncoder_ = enableEncoder_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.codec_ = codec_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.allowVbr_ = allowVbr_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.audio.asr.CloudSpeechSessionParams.EncoderParams) {
          return mergeFrom((com.google.audio.asr.CloudSpeechSessionParams.EncoderParams)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.audio.asr.CloudSpeechSessionParams.EncoderParams other) {
        if (other == com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.getDefaultInstance()) return this;
        if (other.hasEnableEncoder()) {
          setEnableEncoder(other.getEnableEncoder());
        }
        if (other.hasCodec()) {
          setCodec(other.getCodec());
        }
        if (other.hasAllowVbr()) {
          setAllowVbr(other.getAllowVbr());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.audio.asr.CloudSpeechSessionParams.EncoderParams parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.audio.asr.CloudSpeechSessionParams.EncoderParams) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean enableEncoder_ ;
      /**
       * <pre>
       * If the encoder isn't supported, uncompressed audio will be used. When
       * this is false, other EncoderParams fields are ignored.
       * </pre>
       *
       * <code>optional bool enable_encoder = 1 [default = false];</code>
       */
      public boolean hasEnableEncoder() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * If the encoder isn't supported, uncompressed audio will be used. When
       * this is false, other EncoderParams fields are ignored.
       * </pre>
       *
       * <code>optional bool enable_encoder = 1 [default = false];</code>
       */
      public boolean getEnableEncoder() {
        return enableEncoder_;
      }
      /**
       * <pre>
       * If the encoder isn't supported, uncompressed audio will be used. When
       * this is false, other EncoderParams fields are ignored.
       * </pre>
       *
       * <code>optional bool enable_encoder = 1 [default = false];</code>
       */
      public Builder setEnableEncoder(boolean value) {
        bitField0_ |= 0x00000001;
        enableEncoder_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If the encoder isn't supported, uncompressed audio will be used. When
       * this is false, other EncoderParams fields are ignored.
       * </pre>
       *
       * <code>optional bool enable_encoder = 1 [default = false];</code>
       */
      public Builder clearEnableEncoder() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enableEncoder_ = false;
        onChanged();
        return this;
      }

      private int codec_ = 32000;
      /**
       * <code>optional .audio.CodecAndBitrate codec = 2 [default = OGG_OPUS_BITRATE_32KBPS];</code>
       */
      public boolean hasCodec() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .audio.CodecAndBitrate codec = 2 [default = OGG_OPUS_BITRATE_32KBPS];</code>
       */
      public com.google.audio.CodecAndBitrate getCodec() {
        @SuppressWarnings("deprecation")
        com.google.audio.CodecAndBitrate result = com.google.audio.CodecAndBitrate.valueOf(codec_);
        return result == null ? com.google.audio.CodecAndBitrate.OGG_OPUS_BITRATE_32KBPS : result;
      }
      /**
       * <code>optional .audio.CodecAndBitrate codec = 2 [default = OGG_OPUS_BITRATE_32KBPS];</code>
       */
      public Builder setCodec(com.google.audio.CodecAndBitrate value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        codec_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .audio.CodecAndBitrate codec = 2 [default = OGG_OPUS_BITRATE_32KBPS];</code>
       */
      public Builder clearCodec() {
        bitField0_ = (bitField0_ & ~0x00000002);
        codec_ = 32000;
        onChanged();
        return this;
      }

      private boolean allowVbr_ = true;
      /**
       * <pre>
       * Uses variable bitrate encoding, if available. Currently this is available
       * for OggOpus only.
       * </pre>
       *
       * <code>optional bool allow_vbr = 3 [default = true];</code>
       */
      public boolean hasAllowVbr() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Uses variable bitrate encoding, if available. Currently this is available
       * for OggOpus only.
       * </pre>
       *
       * <code>optional bool allow_vbr = 3 [default = true];</code>
       */
      public boolean getAllowVbr() {
        return allowVbr_;
      }
      /**
       * <pre>
       * Uses variable bitrate encoding, if available. Currently this is available
       * for OggOpus only.
       * </pre>
       *
       * <code>optional bool allow_vbr = 3 [default = true];</code>
       */
      public Builder setAllowVbr(boolean value) {
        bitField0_ |= 0x00000004;
        allowVbr_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Uses variable bitrate encoding, if available. Currently this is available
       * for OggOpus only.
       * </pre>
       *
       * <code>optional bool allow_vbr = 3 [default = true];</code>
       */
      public Builder clearAllowVbr() {
        bitField0_ = (bitField0_ & ~0x00000004);
        allowVbr_ = true;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:asr.CloudSpeechSessionParams.EncoderParams)
    }

    // @@protoc_insertion_point(class_scope:asr.CloudSpeechSessionParams.EncoderParams)
    private static final com.google.audio.asr.CloudSpeechSessionParams.EncoderParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.audio.asr.CloudSpeechSessionParams.EncoderParams();
    }

    public static com.google.audio.asr.CloudSpeechSessionParams.EncoderParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<EncoderParams>
        PARSER = new com.google.protobuf.AbstractParser<EncoderParams>() {
      @java.lang.Override
      public EncoderParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EncoderParams(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EncoderParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EncoderParams> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.audio.asr.CloudSpeechSessionParams.EncoderParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int OBSERVER_PARAMS_FIELD_NUMBER = 1;
  private com.google.audio.asr.CloudSpeechStreamObserverParams observerParams_;
  /**
   * <pre>
   * Parameters for the observer, who converts the speech protos into
   * TranscriptionResult.
   * </pre>
   *
   * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
   */
  public boolean hasObserverParams() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Parameters for the observer, who converts the speech protos into
   * TranscriptionResult.
   * </pre>
   *
   * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
   */
  public com.google.audio.asr.CloudSpeechStreamObserverParams getObserverParams() {
    return observerParams_ == null ? com.google.audio.asr.CloudSpeechStreamObserverParams.getDefaultInstance() : observerParams_;
  }
  /**
   * <pre>
   * Parameters for the observer, who converts the speech protos into
   * TranscriptionResult.
   * </pre>
   *
   * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
   */
  public com.google.audio.asr.CloudSpeechStreamObserverParamsOrBuilder getObserverParamsOrBuilder() {
    return observerParams_ == null ? com.google.audio.asr.CloudSpeechStreamObserverParams.getDefaultInstance() : observerParams_;
  }

  public static final int FILTER_PROFANITY_FIELD_NUMBER = 2;
  private boolean filterProfanity_;
  /**
   * <pre>
   * Allows profanity to be filtered by the Cloud Speech API.
   * </pre>
   *
   * <code>optional bool filter_profanity = 2;</code>
   */
  public boolean hasFilterProfanity() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Allows profanity to be filtered by the Cloud Speech API.
   * </pre>
   *
   * <code>optional bool filter_profanity = 2;</code>
   */
  public boolean getFilterProfanity() {
    return filterProfanity_;
  }

  public static final int ENCODER_PARAMS_FIELD_NUMBER = 3;
  private com.google.audio.asr.CloudSpeechSessionParams.EncoderParams encoderParams_;
  /**
   * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
   */
  public boolean hasEncoderParams() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
   */
  public com.google.audio.asr.CloudSpeechSessionParams.EncoderParams getEncoderParams() {
    return encoderParams_ == null ? com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.getDefaultInstance() : encoderParams_;
  }
  /**
   * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
   */
  public com.google.audio.asr.CloudSpeechSessionParams.EncoderParamsOrBuilder getEncoderParamsOrBuilder() {
    return encoderParams_ == null ? com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.getDefaultInstance() : encoderParams_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getObserverParams());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeBool(2, filterProfanity_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getEncoderParams());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getObserverParams());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, filterProfanity_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getEncoderParams());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.audio.asr.CloudSpeechSessionParams)) {
      return super.equals(obj);
    }
    com.google.audio.asr.CloudSpeechSessionParams other = (com.google.audio.asr.CloudSpeechSessionParams) obj;

    if (hasObserverParams() != other.hasObserverParams()) return false;
    if (hasObserverParams()) {
      if (!getObserverParams()
          .equals(other.getObserverParams())) return false;
    }
    if (hasFilterProfanity() != other.hasFilterProfanity()) return false;
    if (hasFilterProfanity()) {
      if (getFilterProfanity()
          != other.getFilterProfanity()) return false;
    }
    if (hasEncoderParams() != other.hasEncoderParams()) return false;
    if (hasEncoderParams()) {
      if (!getEncoderParams()
          .equals(other.getEncoderParams())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasObserverParams()) {
      hash = (37 * hash) + OBSERVER_PARAMS_FIELD_NUMBER;
      hash = (53 * hash) + getObserverParams().hashCode();
    }
    if (hasFilterProfanity()) {
      hash = (37 * hash) + FILTER_PROFANITY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getFilterProfanity());
    }
    if (hasEncoderParams()) {
      hash = (37 * hash) + ENCODER_PARAMS_FIELD_NUMBER;
      hash = (53 * hash) + getEncoderParams().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.audio.asr.CloudSpeechSessionParams parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.audio.asr.CloudSpeechSessionParams prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code asr.CloudSpeechSessionParams}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:asr.CloudSpeechSessionParams)
      com.google.audio.asr.CloudSpeechSessionParamsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.audio.asr.CloudSpeechSessionParams.class, com.google.audio.asr.CloudSpeechSessionParams.Builder.class);
    }

    // Construct using com.google.audio.asr.CloudSpeechSessionParams.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getObserverParamsFieldBuilder();
        getEncoderParamsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (observerParamsBuilder_ == null) {
        observerParams_ = null;
      } else {
        observerParamsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      filterProfanity_ = false;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (encoderParamsBuilder_ == null) {
        encoderParams_ = null;
      } else {
        encoderParamsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.audio.asr.CloudSpeechSessionParamsProto.internal_static_asr_CloudSpeechSessionParams_descriptor;
    }

    @java.lang.Override
    public com.google.audio.asr.CloudSpeechSessionParams getDefaultInstanceForType() {
      return com.google.audio.asr.CloudSpeechSessionParams.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.audio.asr.CloudSpeechSessionParams build() {
      com.google.audio.asr.CloudSpeechSessionParams result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.audio.asr.CloudSpeechSessionParams buildPartial() {
      com.google.audio.asr.CloudSpeechSessionParams result = new com.google.audio.asr.CloudSpeechSessionParams(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        if (observerParamsBuilder_ == null) {
          result.observerParams_ = observerParams_;
        } else {
          result.observerParams_ = observerParamsBuilder_.build();
        }
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.filterProfanity_ = filterProfanity_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        if (encoderParamsBuilder_ == null) {
          result.encoderParams_ = encoderParams_;
        } else {
          result.encoderParams_ = encoderParamsBuilder_.build();
        }
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.audio.asr.CloudSpeechSessionParams) {
        return mergeFrom((com.google.audio.asr.CloudSpeechSessionParams)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.audio.asr.CloudSpeechSessionParams other) {
      if (other == com.google.audio.asr.CloudSpeechSessionParams.getDefaultInstance()) return this;
      if (other.hasObserverParams()) {
        mergeObserverParams(other.getObserverParams());
      }
      if (other.hasFilterProfanity()) {
        setFilterProfanity(other.getFilterProfanity());
      }
      if (other.hasEncoderParams()) {
        mergeEncoderParams(other.getEncoderParams());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.audio.asr.CloudSpeechSessionParams parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.audio.asr.CloudSpeechSessionParams) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.audio.asr.CloudSpeechStreamObserverParams observerParams_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.audio.asr.CloudSpeechStreamObserverParams, com.google.audio.asr.CloudSpeechStreamObserverParams.Builder, com.google.audio.asr.CloudSpeechStreamObserverParamsOrBuilder> observerParamsBuilder_;
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    public boolean hasObserverParams() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    public com.google.audio.asr.CloudSpeechStreamObserverParams getObserverParams() {
      if (observerParamsBuilder_ == null) {
        return observerParams_ == null ? com.google.audio.asr.CloudSpeechStreamObserverParams.getDefaultInstance() : observerParams_;
      } else {
        return observerParamsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    public Builder setObserverParams(com.google.audio.asr.CloudSpeechStreamObserverParams value) {
      if (observerParamsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        observerParams_ = value;
        onChanged();
      } else {
        observerParamsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    public Builder setObserverParams(
        com.google.audio.asr.CloudSpeechStreamObserverParams.Builder builderForValue) {
      if (observerParamsBuilder_ == null) {
        observerParams_ = builderForValue.build();
        onChanged();
      } else {
        observerParamsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    public Builder mergeObserverParams(com.google.audio.asr.CloudSpeechStreamObserverParams value) {
      if (observerParamsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
            observerParams_ != null &&
            observerParams_ != com.google.audio.asr.CloudSpeechStreamObserverParams.getDefaultInstance()) {
          observerParams_ =
            com.google.audio.asr.CloudSpeechStreamObserverParams.newBuilder(observerParams_).mergeFrom(value).buildPartial();
        } else {
          observerParams_ = value;
        }
        onChanged();
      } else {
        observerParamsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    public Builder clearObserverParams() {
      if (observerParamsBuilder_ == null) {
        observerParams_ = null;
        onChanged();
      } else {
        observerParamsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    public com.google.audio.asr.CloudSpeechStreamObserverParams.Builder getObserverParamsBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getObserverParamsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    public com.google.audio.asr.CloudSpeechStreamObserverParamsOrBuilder getObserverParamsOrBuilder() {
      if (observerParamsBuilder_ != null) {
        return observerParamsBuilder_.getMessageOrBuilder();
      } else {
        return observerParams_ == null ?
            com.google.audio.asr.CloudSpeechStreamObserverParams.getDefaultInstance() : observerParams_;
      }
    }
    /**
     * <pre>
     * Parameters for the observer, who converts the speech protos into
     * TranscriptionResult.
     * </pre>
     *
     * <code>optional .asr.CloudSpeechStreamObserverParams observer_params = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.audio.asr.CloudSpeechStreamObserverParams, com.google.audio.asr.CloudSpeechStreamObserverParams.Builder, com.google.audio.asr.CloudSpeechStreamObserverParamsOrBuilder> 
        getObserverParamsFieldBuilder() {
      if (observerParamsBuilder_ == null) {
        observerParamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.audio.asr.CloudSpeechStreamObserverParams, com.google.audio.asr.CloudSpeechStreamObserverParams.Builder, com.google.audio.asr.CloudSpeechStreamObserverParamsOrBuilder>(
                getObserverParams(),
                getParentForChildren(),
                isClean());
        observerParams_ = null;
      }
      return observerParamsBuilder_;
    }

    private boolean filterProfanity_ ;
    /**
     * <pre>
     * Allows profanity to be filtered by the Cloud Speech API.
     * </pre>
     *
     * <code>optional bool filter_profanity = 2;</code>
     */
    public boolean hasFilterProfanity() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Allows profanity to be filtered by the Cloud Speech API.
     * </pre>
     *
     * <code>optional bool filter_profanity = 2;</code>
     */
    public boolean getFilterProfanity() {
      return filterProfanity_;
    }
    /**
     * <pre>
     * Allows profanity to be filtered by the Cloud Speech API.
     * </pre>
     *
     * <code>optional bool filter_profanity = 2;</code>
     */
    public Builder setFilterProfanity(boolean value) {
      bitField0_ |= 0x00000002;
      filterProfanity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows profanity to be filtered by the Cloud Speech API.
     * </pre>
     *
     * <code>optional bool filter_profanity = 2;</code>
     */
    public Builder clearFilterProfanity() {
      bitField0_ = (bitField0_ & ~0x00000002);
      filterProfanity_ = false;
      onChanged();
      return this;
    }

    private com.google.audio.asr.CloudSpeechSessionParams.EncoderParams encoderParams_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.audio.asr.CloudSpeechSessionParams.EncoderParams, com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.Builder, com.google.audio.asr.CloudSpeechSessionParams.EncoderParamsOrBuilder> encoderParamsBuilder_;
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    public boolean hasEncoderParams() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    public com.google.audio.asr.CloudSpeechSessionParams.EncoderParams getEncoderParams() {
      if (encoderParamsBuilder_ == null) {
        return encoderParams_ == null ? com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.getDefaultInstance() : encoderParams_;
      } else {
        return encoderParamsBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    public Builder setEncoderParams(com.google.audio.asr.CloudSpeechSessionParams.EncoderParams value) {
      if (encoderParamsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        encoderParams_ = value;
        onChanged();
      } else {
        encoderParamsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    public Builder setEncoderParams(
        com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.Builder builderForValue) {
      if (encoderParamsBuilder_ == null) {
        encoderParams_ = builderForValue.build();
        onChanged();
      } else {
        encoderParamsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    public Builder mergeEncoderParams(com.google.audio.asr.CloudSpeechSessionParams.EncoderParams value) {
      if (encoderParamsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
            encoderParams_ != null &&
            encoderParams_ != com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.getDefaultInstance()) {
          encoderParams_ =
            com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.newBuilder(encoderParams_).mergeFrom(value).buildPartial();
        } else {
          encoderParams_ = value;
        }
        onChanged();
      } else {
        encoderParamsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    public Builder clearEncoderParams() {
      if (encoderParamsBuilder_ == null) {
        encoderParams_ = null;
        onChanged();
      } else {
        encoderParamsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    public com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.Builder getEncoderParamsBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getEncoderParamsFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    public com.google.audio.asr.CloudSpeechSessionParams.EncoderParamsOrBuilder getEncoderParamsOrBuilder() {
      if (encoderParamsBuilder_ != null) {
        return encoderParamsBuilder_.getMessageOrBuilder();
      } else {
        return encoderParams_ == null ?
            com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.getDefaultInstance() : encoderParams_;
      }
    }
    /**
     * <code>optional .asr.CloudSpeechSessionParams.EncoderParams encoder_params = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.audio.asr.CloudSpeechSessionParams.EncoderParams, com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.Builder, com.google.audio.asr.CloudSpeechSessionParams.EncoderParamsOrBuilder> 
        getEncoderParamsFieldBuilder() {
      if (encoderParamsBuilder_ == null) {
        encoderParamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.audio.asr.CloudSpeechSessionParams.EncoderParams, com.google.audio.asr.CloudSpeechSessionParams.EncoderParams.Builder, com.google.audio.asr.CloudSpeechSessionParams.EncoderParamsOrBuilder>(
                getEncoderParams(),
                getParentForChildren(),
                isClean());
        encoderParams_ = null;
      }
      return encoderParamsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:asr.CloudSpeechSessionParams)
  }

  // @@protoc_insertion_point(class_scope:asr.CloudSpeechSessionParams)
  private static final com.google.audio.asr.CloudSpeechSessionParams DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.audio.asr.CloudSpeechSessionParams();
  }

  public static com.google.audio.asr.CloudSpeechSessionParams getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<CloudSpeechSessionParams>
      PARSER = new com.google.protobuf.AbstractParser<CloudSpeechSessionParams>() {
    @java.lang.Override
    public CloudSpeechSessionParams parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CloudSpeechSessionParams(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CloudSpeechSessionParams> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CloudSpeechSessionParams> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.audio.asr.CloudSpeechSessionParams getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

