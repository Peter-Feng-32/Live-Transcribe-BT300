// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/audio/asr/transcription_result_formatter_options.proto

package com.google.audio.asr;

public interface TranscriptionResultFormatterOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:asr.TranscriptionResultFormatterOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Silences longer than this will cause a space to be inserted.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
   */
  boolean hasExtendedSilenceDurationForLineBreaks();
  /**
   * <pre>
   * Silences longer than this will cause a space to be inserted.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
   */
  com.google.protobuf.Duration getExtendedSilenceDurationForLineBreaks();
  /**
   * <pre>
   * Silences longer than this will cause a space to be inserted.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
   */
  com.google.protobuf.DurationOrBuilder getExtendedSilenceDurationForLineBreaksOrBuilder();

  /**
   * <pre>
   * Number of '&#92;n' characters to add in the event of extended silence.
   * 1 moves to the next line, 2 leaves a blank space in between two lines,
   * and so on...
   * </pre>
   *
   * <code>optional int32 num_extended_silence_line_breaks = 2 [default = 0];</code>
   */
  boolean hasNumExtendedSilenceLineBreaks();
  /**
   * <pre>
   * Number of '&#92;n' characters to add in the event of extended silence.
   * 1 moves to the next line, 2 leaves a blank space in between two lines,
   * and so on...
   * </pre>
   *
   * <code>optional int32 num_extended_silence_line_breaks = 2 [default = 0];</code>
   */
  int getNumExtendedSilenceLineBreaks();

  /**
   * <pre>
   * Number of '&#92;n' characters to add in the event of language switch.
   * 1 moves to the next line, 2 leaves a blank space in between two lines, and
   * so on...
   * </pre>
   *
   * <code>optional int32 num_language_switch_line_breaks = 3 [default = 1];</code>
   */
  boolean hasNumLanguageSwitchLineBreaks();
  /**
   * <pre>
   * Number of '&#92;n' characters to add in the event of language switch.
   * 1 moves to the next line, 2 leaves a blank space in between two lines, and
   * so on...
   * </pre>
   *
   * <code>optional int32 num_language_switch_line_breaks = 3 [default = 1];</code>
   */
  int getNumLanguageSwitchLineBreaks();

  /**
   * <pre>
   * Put current hypotheses in italics.
   * </pre>
   *
   * <code>optional bool italicize_current_hypothesis = 4 [default = false];</code>
   */
  boolean hasItalicizeCurrentHypothesis();
  /**
   * <pre>
   * Put current hypotheses in italics.
   * </pre>
   *
   * <code>optional bool italicize_current_hypothesis = 4 [default = false];</code>
   */
  boolean getItalicizeCurrentHypothesis();

  /**
   * <pre>
   * If true, use a yellow-&gt;blue colormap to indicate confidence.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle transcript_coloring_style = 5 [default = NO_COLORING];</code>
   */
  boolean hasTranscriptColoringStyle();
  /**
   * <pre>
   * If true, use a yellow-&gt;blue colormap to indicate confidence.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle transcript_coloring_style = 5 [default = NO_COLORING];</code>
   */
  com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle getTranscriptColoringStyle();

  /**
   * <pre>
   * The color theme used for the text.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.TextColormap text_colormap = 6 [default = DARK_THEME];</code>
   */
  boolean hasTextColormap();
  /**
   * <pre>
   * The color theme used for the text.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.TextColormap text_colormap = 6 [default = DARK_THEME];</code>
   */
  com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap getTextColormap();

  /**
   * <pre>
   * A label that indicates which speaker is active.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle speaker_indication_style = 7 [default = NO_SPEAKER_INDICATION];</code>
   */
  boolean hasSpeakerIndicationStyle();
  /**
   * <pre>
   * A label that indicates which speaker is active.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle speaker_indication_style = 7 [default = NO_SPEAKER_INDICATION];</code>
   */
  com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle getSpeakerIndicationStyle();
}
