// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/audio/asr/cloud_speech_stream_observer_params.proto

package com.google.audio.asr;

public final class CloudSpeechSessionObserverParamsProto {
  private CloudSpeechSessionObserverParamsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_asr_CloudSpeechStreamObserverParams_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_asr_CloudSpeechStreamObserverParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n>com/google/audio/asr/cloud_speech_stre" +
      "am_observer_params.proto\022\003asr\"E\n\037CloudSp" +
      "eechStreamObserverParams\022\"\n\032reject_unsta" +
      "ble_hypotheses\030\001 \001(\010B?\n\024com.google.audio" +
      ".asrB%CloudSpeechSessionObserverParamsPr" +
      "otoP\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_asr_CloudSpeechStreamObserverParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_asr_CloudSpeechStreamObserverParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_asr_CloudSpeechStreamObserverParams_descriptor,
        new java.lang.String[] { "RejectUnstableHypotheses", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
