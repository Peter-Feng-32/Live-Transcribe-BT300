// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/audio/asr/transcription_result_formatter_options.proto

package com.google.audio.asr;

/**
 * Protobuf type {@code asr.TranscriptionResultFormatterOptions}
 */
public  final class TranscriptionResultFormatterOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:asr.TranscriptionResultFormatterOptions)
    TranscriptionResultFormatterOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TranscriptionResultFormatterOptions.newBuilder() to construct.
  private TranscriptionResultFormatterOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TranscriptionResultFormatterOptions() {
    numLanguageSwitchLineBreaks_ = 1;
    transcriptColoringStyle_ = 1;
    textColormap_ = 2;
    speakerIndicationStyle_ = 1;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TranscriptionResultFormatterOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TranscriptionResultFormatterOptions(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) != 0)) {
              subBuilder = extendedSilenceDurationForLineBreaks_.toBuilder();
            }
            extendedSilenceDurationForLineBreaks_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(extendedSilenceDurationForLineBreaks_);
              extendedSilenceDurationForLineBreaks_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            numExtendedSilenceLineBreaks_ = input.readInt32();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            numLanguageSwitchLineBreaks_ = input.readInt32();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            italicizeCurrentHypothesis_ = input.readBool();
            break;
          }
          case 40: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle value = com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(5, rawValue);
            } else {
              bitField0_ |= 0x00000010;
              transcriptColoringStyle_ = rawValue;
            }
            break;
          }
          case 48: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap value = com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(6, rawValue);
            } else {
              bitField0_ |= 0x00000020;
              textColormap_ = rawValue;
            }
            break;
          }
          case 56: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle value = com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(7, rawValue);
            } else {
              bitField0_ |= 0x00000040;
              speakerIndicationStyle_ = rawValue;
            }
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.audio.asr.TranscriptionResultFormatterOptionsProto.internal_static_asr_TranscriptionResultFormatterOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.audio.asr.TranscriptionResultFormatterOptionsProto.internal_static_asr_TranscriptionResultFormatterOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.audio.asr.TranscriptionResultFormatterOptions.class, com.google.audio.asr.TranscriptionResultFormatterOptions.Builder.class);
  }

  /**
   * <pre>
   * Color selection for the text (does not change background). Dark colors for
   * a black-on-white theme. Bright colors for a white-on-black theme.
   * </pre>
   *
   * Protobuf enum {@code asr.TranscriptionResultFormatterOptions.TextColormap}
   */
  public enum TextColormap
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNSPECIFIED_THEME = 0;</code>
     */
    UNSPECIFIED_THEME(0),
    /**
     * <code>LIGHT_THEME = 1;</code>
     */
    LIGHT_THEME(1),
    /**
     * <code>DARK_THEME = 2;</code>
     */
    DARK_THEME(2),
    ;

    /**
     * <code>UNSPECIFIED_THEME = 0;</code>
     */
    public static final int UNSPECIFIED_THEME_VALUE = 0;
    /**
     * <code>LIGHT_THEME = 1;</code>
     */
    public static final int LIGHT_THEME_VALUE = 1;
    /**
     * <code>DARK_THEME = 2;</code>
     */
    public static final int DARK_THEME_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TextColormap valueOf(int value) {
      return forNumber(value);
    }

    public static TextColormap forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_THEME;
        case 1: return LIGHT_THEME;
        case 2: return DARK_THEME;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TextColormap>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TextColormap> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TextColormap>() {
            public TextColormap findValueByNumber(int number) {
              return TextColormap.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.audio.asr.TranscriptionResultFormatterOptions.getDescriptor().getEnumTypes().get(0);
    }

    private static final TextColormap[] VALUES = values();

    public static TextColormap valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TextColormap(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:asr.TranscriptionResultFormatterOptions.TextColormap)
  }

  /**
   * <pre>
   * Details on the manner in which the transcript will be colored.
   * </pre>
   *
   * Protobuf enum {@code asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle}
   */
  public enum TranscriptColoringStyle
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Will do NO_COLORING.
     * </pre>
     *
     * <code>UNSPECIFIED_COLORING_STYLE = 0;</code>
     */
    UNSPECIFIED_COLORING_STYLE(0),
    /**
     * <code>NO_COLORING = 1;</code>
     */
    NO_COLORING(1),
    /**
     * <code>COLOR_BY_UTTERANCE_LEVEL_CONFIDENCE = 2;</code>
     */
    COLOR_BY_UTTERANCE_LEVEL_CONFIDENCE(2),
    /**
     * <code>COLOR_BY_WORD_LEVEL_CONFIDENCE = 3;</code>
     */
    COLOR_BY_WORD_LEVEL_CONFIDENCE(3),
    /**
     * <code>COLOR_BY_SPEAKER_ID = 4;</code>
     */
    COLOR_BY_SPEAKER_ID(4),
    ;

    /**
     * <pre>
     * Will do NO_COLORING.
     * </pre>
     *
     * <code>UNSPECIFIED_COLORING_STYLE = 0;</code>
     */
    public static final int UNSPECIFIED_COLORING_STYLE_VALUE = 0;
    /**
     * <code>NO_COLORING = 1;</code>
     */
    public static final int NO_COLORING_VALUE = 1;
    /**
     * <code>COLOR_BY_UTTERANCE_LEVEL_CONFIDENCE = 2;</code>
     */
    public static final int COLOR_BY_UTTERANCE_LEVEL_CONFIDENCE_VALUE = 2;
    /**
     * <code>COLOR_BY_WORD_LEVEL_CONFIDENCE = 3;</code>
     */
    public static final int COLOR_BY_WORD_LEVEL_CONFIDENCE_VALUE = 3;
    /**
     * <code>COLOR_BY_SPEAKER_ID = 4;</code>
     */
    public static final int COLOR_BY_SPEAKER_ID_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TranscriptColoringStyle valueOf(int value) {
      return forNumber(value);
    }

    public static TranscriptColoringStyle forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_COLORING_STYLE;
        case 1: return NO_COLORING;
        case 2: return COLOR_BY_UTTERANCE_LEVEL_CONFIDENCE;
        case 3: return COLOR_BY_WORD_LEVEL_CONFIDENCE;
        case 4: return COLOR_BY_SPEAKER_ID;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TranscriptColoringStyle>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TranscriptColoringStyle> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TranscriptColoringStyle>() {
            public TranscriptColoringStyle findValueByNumber(int number) {
              return TranscriptColoringStyle.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.audio.asr.TranscriptionResultFormatterOptions.getDescriptor().getEnumTypes().get(1);
    }

    private static final TranscriptColoringStyle[] VALUES = values();

    public static TranscriptColoringStyle valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TranscriptColoringStyle(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle)
  }

  /**
   * Protobuf enum {@code asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle}
   */
  public enum SpeakerIndicationStyle
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNSPECIFIED_SPEAKER_INDICATION_STYLE = 0;</code>
     */
    UNSPECIFIED_SPEAKER_INDICATION_STYLE(0),
    /**
     * <code>NO_SPEAKER_INDICATION = 1;</code>
     */
    NO_SPEAKER_INDICATION(1),
    /**
     * <code>SHOW_SPEAKER_NUMBER = 2;</code>
     */
    SHOW_SPEAKER_NUMBER(2),
    ;

    /**
     * <code>UNSPECIFIED_SPEAKER_INDICATION_STYLE = 0;</code>
     */
    public static final int UNSPECIFIED_SPEAKER_INDICATION_STYLE_VALUE = 0;
    /**
     * <code>NO_SPEAKER_INDICATION = 1;</code>
     */
    public static final int NO_SPEAKER_INDICATION_VALUE = 1;
    /**
     * <code>SHOW_SPEAKER_NUMBER = 2;</code>
     */
    public static final int SHOW_SPEAKER_NUMBER_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpeakerIndicationStyle valueOf(int value) {
      return forNumber(value);
    }

    public static SpeakerIndicationStyle forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_SPEAKER_INDICATION_STYLE;
        case 1: return NO_SPEAKER_INDICATION;
        case 2: return SHOW_SPEAKER_NUMBER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SpeakerIndicationStyle>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SpeakerIndicationStyle> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SpeakerIndicationStyle>() {
            public SpeakerIndicationStyle findValueByNumber(int number) {
              return SpeakerIndicationStyle.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.audio.asr.TranscriptionResultFormatterOptions.getDescriptor().getEnumTypes().get(2);
    }

    private static final SpeakerIndicationStyle[] VALUES = values();

    public static SpeakerIndicationStyle valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SpeakerIndicationStyle(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle)
  }

  private int bitField0_;
  public static final int EXTENDED_SILENCE_DURATION_FOR_LINE_BREAKS_FIELD_NUMBER = 1;
  private com.google.protobuf.Duration extendedSilenceDurationForLineBreaks_;
  /**
   * <pre>
   * Silences longer than this will cause a space to be inserted.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
   */
  public boolean hasExtendedSilenceDurationForLineBreaks() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Silences longer than this will cause a space to be inserted.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
   */
  public com.google.protobuf.Duration getExtendedSilenceDurationForLineBreaks() {
    return extendedSilenceDurationForLineBreaks_ == null ? com.google.protobuf.Duration.getDefaultInstance() : extendedSilenceDurationForLineBreaks_;
  }
  /**
   * <pre>
   * Silences longer than this will cause a space to be inserted.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
   */
  public com.google.protobuf.DurationOrBuilder getExtendedSilenceDurationForLineBreaksOrBuilder() {
    return extendedSilenceDurationForLineBreaks_ == null ? com.google.protobuf.Duration.getDefaultInstance() : extendedSilenceDurationForLineBreaks_;
  }

  public static final int NUM_EXTENDED_SILENCE_LINE_BREAKS_FIELD_NUMBER = 2;
  private int numExtendedSilenceLineBreaks_;
  /**
   * <pre>
   * Number of '&#92;n' characters to add in the event of extended silence.
   * 1 moves to the next line, 2 leaves a blank space in between two lines,
   * and so on...
   * </pre>
   *
   * <code>optional int32 num_extended_silence_line_breaks = 2 [default = 0];</code>
   */
  public boolean hasNumExtendedSilenceLineBreaks() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Number of '&#92;n' characters to add in the event of extended silence.
   * 1 moves to the next line, 2 leaves a blank space in between two lines,
   * and so on...
   * </pre>
   *
   * <code>optional int32 num_extended_silence_line_breaks = 2 [default = 0];</code>
   */
  public int getNumExtendedSilenceLineBreaks() {
    return numExtendedSilenceLineBreaks_;
  }

  public static final int NUM_LANGUAGE_SWITCH_LINE_BREAKS_FIELD_NUMBER = 3;
  private int numLanguageSwitchLineBreaks_;
  /**
   * <pre>
   * Number of '&#92;n' characters to add in the event of language switch.
   * 1 moves to the next line, 2 leaves a blank space in between two lines, and
   * so on...
   * </pre>
   *
   * <code>optional int32 num_language_switch_line_breaks = 3 [default = 1];</code>
   */
  public boolean hasNumLanguageSwitchLineBreaks() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Number of '&#92;n' characters to add in the event of language switch.
   * 1 moves to the next line, 2 leaves a blank space in between two lines, and
   * so on...
   * </pre>
   *
   * <code>optional int32 num_language_switch_line_breaks = 3 [default = 1];</code>
   */
  public int getNumLanguageSwitchLineBreaks() {
    return numLanguageSwitchLineBreaks_;
  }

  public static final int ITALICIZE_CURRENT_HYPOTHESIS_FIELD_NUMBER = 4;
  private boolean italicizeCurrentHypothesis_;
  /**
   * <pre>
   * Put current hypotheses in italics.
   * </pre>
   *
   * <code>optional bool italicize_current_hypothesis = 4 [default = false];</code>
   */
  public boolean hasItalicizeCurrentHypothesis() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Put current hypotheses in italics.
   * </pre>
   *
   * <code>optional bool italicize_current_hypothesis = 4 [default = false];</code>
   */
  public boolean getItalicizeCurrentHypothesis() {
    return italicizeCurrentHypothesis_;
  }

  public static final int TRANSCRIPT_COLORING_STYLE_FIELD_NUMBER = 5;
  private int transcriptColoringStyle_;
  /**
   * <pre>
   * If true, use a yellow-&gt;blue colormap to indicate confidence.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle transcript_coloring_style = 5 [default = NO_COLORING];</code>
   */
  public boolean hasTranscriptColoringStyle() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * If true, use a yellow-&gt;blue colormap to indicate confidence.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle transcript_coloring_style = 5 [default = NO_COLORING];</code>
   */
  public com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle getTranscriptColoringStyle() {
    @SuppressWarnings("deprecation")
    com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle result = com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle.valueOf(transcriptColoringStyle_);
    return result == null ? com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle.NO_COLORING : result;
  }

  public static final int TEXT_COLORMAP_FIELD_NUMBER = 6;
  private int textColormap_;
  /**
   * <pre>
   * The color theme used for the text.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.TextColormap text_colormap = 6 [default = DARK_THEME];</code>
   */
  public boolean hasTextColormap() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The color theme used for the text.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.TextColormap text_colormap = 6 [default = DARK_THEME];</code>
   */
  public com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap getTextColormap() {
    @SuppressWarnings("deprecation")
    com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap result = com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap.valueOf(textColormap_);
    return result == null ? com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap.DARK_THEME : result;
  }

  public static final int SPEAKER_INDICATION_STYLE_FIELD_NUMBER = 7;
  private int speakerIndicationStyle_;
  /**
   * <pre>
   * A label that indicates which speaker is active.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle speaker_indication_style = 7 [default = NO_SPEAKER_INDICATION];</code>
   */
  public boolean hasSpeakerIndicationStyle() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * A label that indicates which speaker is active.
   * </pre>
   *
   * <code>optional .asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle speaker_indication_style = 7 [default = NO_SPEAKER_INDICATION];</code>
   */
  public com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle getSpeakerIndicationStyle() {
    @SuppressWarnings("deprecation")
    com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle result = com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle.valueOf(speakerIndicationStyle_);
    return result == null ? com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle.NO_SPEAKER_INDICATION : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getExtendedSilenceDurationForLineBreaks());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeInt32(2, numExtendedSilenceLineBreaks_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt32(3, numLanguageSwitchLineBreaks_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeBool(4, italicizeCurrentHypothesis_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeEnum(5, transcriptColoringStyle_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeEnum(6, textColormap_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeEnum(7, speakerIndicationStyle_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getExtendedSilenceDurationForLineBreaks());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, numExtendedSilenceLineBreaks_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, numLanguageSwitchLineBreaks_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, italicizeCurrentHypothesis_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, transcriptColoringStyle_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, textColormap_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, speakerIndicationStyle_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.audio.asr.TranscriptionResultFormatterOptions)) {
      return super.equals(obj);
    }
    com.google.audio.asr.TranscriptionResultFormatterOptions other = (com.google.audio.asr.TranscriptionResultFormatterOptions) obj;

    if (hasExtendedSilenceDurationForLineBreaks() != other.hasExtendedSilenceDurationForLineBreaks()) return false;
    if (hasExtendedSilenceDurationForLineBreaks()) {
      if (!getExtendedSilenceDurationForLineBreaks()
          .equals(other.getExtendedSilenceDurationForLineBreaks())) return false;
    }
    if (hasNumExtendedSilenceLineBreaks() != other.hasNumExtendedSilenceLineBreaks()) return false;
    if (hasNumExtendedSilenceLineBreaks()) {
      if (getNumExtendedSilenceLineBreaks()
          != other.getNumExtendedSilenceLineBreaks()) return false;
    }
    if (hasNumLanguageSwitchLineBreaks() != other.hasNumLanguageSwitchLineBreaks()) return false;
    if (hasNumLanguageSwitchLineBreaks()) {
      if (getNumLanguageSwitchLineBreaks()
          != other.getNumLanguageSwitchLineBreaks()) return false;
    }
    if (hasItalicizeCurrentHypothesis() != other.hasItalicizeCurrentHypothesis()) return false;
    if (hasItalicizeCurrentHypothesis()) {
      if (getItalicizeCurrentHypothesis()
          != other.getItalicizeCurrentHypothesis()) return false;
    }
    if (hasTranscriptColoringStyle() != other.hasTranscriptColoringStyle()) return false;
    if (hasTranscriptColoringStyle()) {
      if (transcriptColoringStyle_ != other.transcriptColoringStyle_) return false;
    }
    if (hasTextColormap() != other.hasTextColormap()) return false;
    if (hasTextColormap()) {
      if (textColormap_ != other.textColormap_) return false;
    }
    if (hasSpeakerIndicationStyle() != other.hasSpeakerIndicationStyle()) return false;
    if (hasSpeakerIndicationStyle()) {
      if (speakerIndicationStyle_ != other.speakerIndicationStyle_) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasExtendedSilenceDurationForLineBreaks()) {
      hash = (37 * hash) + EXTENDED_SILENCE_DURATION_FOR_LINE_BREAKS_FIELD_NUMBER;
      hash = (53 * hash) + getExtendedSilenceDurationForLineBreaks().hashCode();
    }
    if (hasNumExtendedSilenceLineBreaks()) {
      hash = (37 * hash) + NUM_EXTENDED_SILENCE_LINE_BREAKS_FIELD_NUMBER;
      hash = (53 * hash) + getNumExtendedSilenceLineBreaks();
    }
    if (hasNumLanguageSwitchLineBreaks()) {
      hash = (37 * hash) + NUM_LANGUAGE_SWITCH_LINE_BREAKS_FIELD_NUMBER;
      hash = (53 * hash) + getNumLanguageSwitchLineBreaks();
    }
    if (hasItalicizeCurrentHypothesis()) {
      hash = (37 * hash) + ITALICIZE_CURRENT_HYPOTHESIS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getItalicizeCurrentHypothesis());
    }
    if (hasTranscriptColoringStyle()) {
      hash = (37 * hash) + TRANSCRIPT_COLORING_STYLE_FIELD_NUMBER;
      hash = (53 * hash) + transcriptColoringStyle_;
    }
    if (hasTextColormap()) {
      hash = (37 * hash) + TEXT_COLORMAP_FIELD_NUMBER;
      hash = (53 * hash) + textColormap_;
    }
    if (hasSpeakerIndicationStyle()) {
      hash = (37 * hash) + SPEAKER_INDICATION_STYLE_FIELD_NUMBER;
      hash = (53 * hash) + speakerIndicationStyle_;
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.audio.asr.TranscriptionResultFormatterOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.audio.asr.TranscriptionResultFormatterOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code asr.TranscriptionResultFormatterOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:asr.TranscriptionResultFormatterOptions)
      com.google.audio.asr.TranscriptionResultFormatterOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.audio.asr.TranscriptionResultFormatterOptionsProto.internal_static_asr_TranscriptionResultFormatterOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.audio.asr.TranscriptionResultFormatterOptionsProto.internal_static_asr_TranscriptionResultFormatterOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.audio.asr.TranscriptionResultFormatterOptions.class, com.google.audio.asr.TranscriptionResultFormatterOptions.Builder.class);
    }

    // Construct using com.google.audio.asr.TranscriptionResultFormatterOptions.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getExtendedSilenceDurationForLineBreaksFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (extendedSilenceDurationForLineBreaksBuilder_ == null) {
        extendedSilenceDurationForLineBreaks_ = null;
      } else {
        extendedSilenceDurationForLineBreaksBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      numExtendedSilenceLineBreaks_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      numLanguageSwitchLineBreaks_ = 1;
      bitField0_ = (bitField0_ & ~0x00000004);
      italicizeCurrentHypothesis_ = false;
      bitField0_ = (bitField0_ & ~0x00000008);
      transcriptColoringStyle_ = 1;
      bitField0_ = (bitField0_ & ~0x00000010);
      textColormap_ = 2;
      bitField0_ = (bitField0_ & ~0x00000020);
      speakerIndicationStyle_ = 1;
      bitField0_ = (bitField0_ & ~0x00000040);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.audio.asr.TranscriptionResultFormatterOptionsProto.internal_static_asr_TranscriptionResultFormatterOptions_descriptor;
    }

    @java.lang.Override
    public com.google.audio.asr.TranscriptionResultFormatterOptions getDefaultInstanceForType() {
      return com.google.audio.asr.TranscriptionResultFormatterOptions.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.audio.asr.TranscriptionResultFormatterOptions build() {
      com.google.audio.asr.TranscriptionResultFormatterOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.audio.asr.TranscriptionResultFormatterOptions buildPartial() {
      com.google.audio.asr.TranscriptionResultFormatterOptions result = new com.google.audio.asr.TranscriptionResultFormatterOptions(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        if (extendedSilenceDurationForLineBreaksBuilder_ == null) {
          result.extendedSilenceDurationForLineBreaks_ = extendedSilenceDurationForLineBreaks_;
        } else {
          result.extendedSilenceDurationForLineBreaks_ = extendedSilenceDurationForLineBreaksBuilder_.build();
        }
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.numExtendedSilenceLineBreaks_ = numExtendedSilenceLineBreaks_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        to_bitField0_ |= 0x00000004;
      }
      result.numLanguageSwitchLineBreaks_ = numLanguageSwitchLineBreaks_;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.italicizeCurrentHypothesis_ = italicizeCurrentHypothesis_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        to_bitField0_ |= 0x00000010;
      }
      result.transcriptColoringStyle_ = transcriptColoringStyle_;
      if (((from_bitField0_ & 0x00000020) != 0)) {
        to_bitField0_ |= 0x00000020;
      }
      result.textColormap_ = textColormap_;
      if (((from_bitField0_ & 0x00000040) != 0)) {
        to_bitField0_ |= 0x00000040;
      }
      result.speakerIndicationStyle_ = speakerIndicationStyle_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.audio.asr.TranscriptionResultFormatterOptions) {
        return mergeFrom((com.google.audio.asr.TranscriptionResultFormatterOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.audio.asr.TranscriptionResultFormatterOptions other) {
      if (other == com.google.audio.asr.TranscriptionResultFormatterOptions.getDefaultInstance()) return this;
      if (other.hasExtendedSilenceDurationForLineBreaks()) {
        mergeExtendedSilenceDurationForLineBreaks(other.getExtendedSilenceDurationForLineBreaks());
      }
      if (other.hasNumExtendedSilenceLineBreaks()) {
        setNumExtendedSilenceLineBreaks(other.getNumExtendedSilenceLineBreaks());
      }
      if (other.hasNumLanguageSwitchLineBreaks()) {
        setNumLanguageSwitchLineBreaks(other.getNumLanguageSwitchLineBreaks());
      }
      if (other.hasItalicizeCurrentHypothesis()) {
        setItalicizeCurrentHypothesis(other.getItalicizeCurrentHypothesis());
      }
      if (other.hasTranscriptColoringStyle()) {
        setTranscriptColoringStyle(other.getTranscriptColoringStyle());
      }
      if (other.hasTextColormap()) {
        setTextColormap(other.getTextColormap());
      }
      if (other.hasSpeakerIndicationStyle()) {
        setSpeakerIndicationStyle(other.getSpeakerIndicationStyle());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.audio.asr.TranscriptionResultFormatterOptions parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.audio.asr.TranscriptionResultFormatterOptions) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Duration extendedSilenceDurationForLineBreaks_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> extendedSilenceDurationForLineBreaksBuilder_;
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    public boolean hasExtendedSilenceDurationForLineBreaks() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    public com.google.protobuf.Duration getExtendedSilenceDurationForLineBreaks() {
      if (extendedSilenceDurationForLineBreaksBuilder_ == null) {
        return extendedSilenceDurationForLineBreaks_ == null ? com.google.protobuf.Duration.getDefaultInstance() : extendedSilenceDurationForLineBreaks_;
      } else {
        return extendedSilenceDurationForLineBreaksBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    public Builder setExtendedSilenceDurationForLineBreaks(com.google.protobuf.Duration value) {
      if (extendedSilenceDurationForLineBreaksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        extendedSilenceDurationForLineBreaks_ = value;
        onChanged();
      } else {
        extendedSilenceDurationForLineBreaksBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    public Builder setExtendedSilenceDurationForLineBreaks(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (extendedSilenceDurationForLineBreaksBuilder_ == null) {
        extendedSilenceDurationForLineBreaks_ = builderForValue.build();
        onChanged();
      } else {
        extendedSilenceDurationForLineBreaksBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    public Builder mergeExtendedSilenceDurationForLineBreaks(com.google.protobuf.Duration value) {
      if (extendedSilenceDurationForLineBreaksBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
            extendedSilenceDurationForLineBreaks_ != null &&
            extendedSilenceDurationForLineBreaks_ != com.google.protobuf.Duration.getDefaultInstance()) {
          extendedSilenceDurationForLineBreaks_ =
            com.google.protobuf.Duration.newBuilder(extendedSilenceDurationForLineBreaks_).mergeFrom(value).buildPartial();
        } else {
          extendedSilenceDurationForLineBreaks_ = value;
        }
        onChanged();
      } else {
        extendedSilenceDurationForLineBreaksBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    public Builder clearExtendedSilenceDurationForLineBreaks() {
      if (extendedSilenceDurationForLineBreaksBuilder_ == null) {
        extendedSilenceDurationForLineBreaks_ = null;
        onChanged();
      } else {
        extendedSilenceDurationForLineBreaksBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    public com.google.protobuf.Duration.Builder getExtendedSilenceDurationForLineBreaksBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getExtendedSilenceDurationForLineBreaksFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    public com.google.protobuf.DurationOrBuilder getExtendedSilenceDurationForLineBreaksOrBuilder() {
      if (extendedSilenceDurationForLineBreaksBuilder_ != null) {
        return extendedSilenceDurationForLineBreaksBuilder_.getMessageOrBuilder();
      } else {
        return extendedSilenceDurationForLineBreaks_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : extendedSilenceDurationForLineBreaks_;
      }
    }
    /**
     * <pre>
     * Silences longer than this will cause a space to be inserted.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration extended_silence_duration_for_line_breaks = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getExtendedSilenceDurationForLineBreaksFieldBuilder() {
      if (extendedSilenceDurationForLineBreaksBuilder_ == null) {
        extendedSilenceDurationForLineBreaksBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getExtendedSilenceDurationForLineBreaks(),
                getParentForChildren(),
                isClean());
        extendedSilenceDurationForLineBreaks_ = null;
      }
      return extendedSilenceDurationForLineBreaksBuilder_;
    }

    private int numExtendedSilenceLineBreaks_ ;
    /**
     * <pre>
     * Number of '&#92;n' characters to add in the event of extended silence.
     * 1 moves to the next line, 2 leaves a blank space in between two lines,
     * and so on...
     * </pre>
     *
     * <code>optional int32 num_extended_silence_line_breaks = 2 [default = 0];</code>
     */
    public boolean hasNumExtendedSilenceLineBreaks() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Number of '&#92;n' characters to add in the event of extended silence.
     * 1 moves to the next line, 2 leaves a blank space in between two lines,
     * and so on...
     * </pre>
     *
     * <code>optional int32 num_extended_silence_line_breaks = 2 [default = 0];</code>
     */
    public int getNumExtendedSilenceLineBreaks() {
      return numExtendedSilenceLineBreaks_;
    }
    /**
     * <pre>
     * Number of '&#92;n' characters to add in the event of extended silence.
     * 1 moves to the next line, 2 leaves a blank space in between two lines,
     * and so on...
     * </pre>
     *
     * <code>optional int32 num_extended_silence_line_breaks = 2 [default = 0];</code>
     */
    public Builder setNumExtendedSilenceLineBreaks(int value) {
      bitField0_ |= 0x00000002;
      numExtendedSilenceLineBreaks_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of '&#92;n' characters to add in the event of extended silence.
     * 1 moves to the next line, 2 leaves a blank space in between two lines,
     * and so on...
     * </pre>
     *
     * <code>optional int32 num_extended_silence_line_breaks = 2 [default = 0];</code>
     */
    public Builder clearNumExtendedSilenceLineBreaks() {
      bitField0_ = (bitField0_ & ~0x00000002);
      numExtendedSilenceLineBreaks_ = 0;
      onChanged();
      return this;
    }

    private int numLanguageSwitchLineBreaks_ = 1;
    /**
     * <pre>
     * Number of '&#92;n' characters to add in the event of language switch.
     * 1 moves to the next line, 2 leaves a blank space in between two lines, and
     * so on...
     * </pre>
     *
     * <code>optional int32 num_language_switch_line_breaks = 3 [default = 1];</code>
     */
    public boolean hasNumLanguageSwitchLineBreaks() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Number of '&#92;n' characters to add in the event of language switch.
     * 1 moves to the next line, 2 leaves a blank space in between two lines, and
     * so on...
     * </pre>
     *
     * <code>optional int32 num_language_switch_line_breaks = 3 [default = 1];</code>
     */
    public int getNumLanguageSwitchLineBreaks() {
      return numLanguageSwitchLineBreaks_;
    }
    /**
     * <pre>
     * Number of '&#92;n' characters to add in the event of language switch.
     * 1 moves to the next line, 2 leaves a blank space in between two lines, and
     * so on...
     * </pre>
     *
     * <code>optional int32 num_language_switch_line_breaks = 3 [default = 1];</code>
     */
    public Builder setNumLanguageSwitchLineBreaks(int value) {
      bitField0_ |= 0x00000004;
      numLanguageSwitchLineBreaks_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of '&#92;n' characters to add in the event of language switch.
     * 1 moves to the next line, 2 leaves a blank space in between two lines, and
     * so on...
     * </pre>
     *
     * <code>optional int32 num_language_switch_line_breaks = 3 [default = 1];</code>
     */
    public Builder clearNumLanguageSwitchLineBreaks() {
      bitField0_ = (bitField0_ & ~0x00000004);
      numLanguageSwitchLineBreaks_ = 1;
      onChanged();
      return this;
    }

    private boolean italicizeCurrentHypothesis_ ;
    /**
     * <pre>
     * Put current hypotheses in italics.
     * </pre>
     *
     * <code>optional bool italicize_current_hypothesis = 4 [default = false];</code>
     */
    public boolean hasItalicizeCurrentHypothesis() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Put current hypotheses in italics.
     * </pre>
     *
     * <code>optional bool italicize_current_hypothesis = 4 [default = false];</code>
     */
    public boolean getItalicizeCurrentHypothesis() {
      return italicizeCurrentHypothesis_;
    }
    /**
     * <pre>
     * Put current hypotheses in italics.
     * </pre>
     *
     * <code>optional bool italicize_current_hypothesis = 4 [default = false];</code>
     */
    public Builder setItalicizeCurrentHypothesis(boolean value) {
      bitField0_ |= 0x00000008;
      italicizeCurrentHypothesis_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Put current hypotheses in italics.
     * </pre>
     *
     * <code>optional bool italicize_current_hypothesis = 4 [default = false];</code>
     */
    public Builder clearItalicizeCurrentHypothesis() {
      bitField0_ = (bitField0_ & ~0x00000008);
      italicizeCurrentHypothesis_ = false;
      onChanged();
      return this;
    }

    private int transcriptColoringStyle_ = 1;
    /**
     * <pre>
     * If true, use a yellow-&gt;blue colormap to indicate confidence.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle transcript_coloring_style = 5 [default = NO_COLORING];</code>
     */
    public boolean hasTranscriptColoringStyle() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * If true, use a yellow-&gt;blue colormap to indicate confidence.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle transcript_coloring_style = 5 [default = NO_COLORING];</code>
     */
    public com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle getTranscriptColoringStyle() {
      @SuppressWarnings("deprecation")
      com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle result = com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle.valueOf(transcriptColoringStyle_);
      return result == null ? com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle.NO_COLORING : result;
    }
    /**
     * <pre>
     * If true, use a yellow-&gt;blue colormap to indicate confidence.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle transcript_coloring_style = 5 [default = NO_COLORING];</code>
     */
    public Builder setTranscriptColoringStyle(com.google.audio.asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      transcriptColoringStyle_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true, use a yellow-&gt;blue colormap to indicate confidence.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.TranscriptColoringStyle transcript_coloring_style = 5 [default = NO_COLORING];</code>
     */
    public Builder clearTranscriptColoringStyle() {
      bitField0_ = (bitField0_ & ~0x00000010);
      transcriptColoringStyle_ = 1;
      onChanged();
      return this;
    }

    private int textColormap_ = 2;
    /**
     * <pre>
     * The color theme used for the text.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.TextColormap text_colormap = 6 [default = DARK_THEME];</code>
     */
    public boolean hasTextColormap() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The color theme used for the text.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.TextColormap text_colormap = 6 [default = DARK_THEME];</code>
     */
    public com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap getTextColormap() {
      @SuppressWarnings("deprecation")
      com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap result = com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap.valueOf(textColormap_);
      return result == null ? com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap.DARK_THEME : result;
    }
    /**
     * <pre>
     * The color theme used for the text.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.TextColormap text_colormap = 6 [default = DARK_THEME];</code>
     */
    public Builder setTextColormap(com.google.audio.asr.TranscriptionResultFormatterOptions.TextColormap value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      textColormap_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The color theme used for the text.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.TextColormap text_colormap = 6 [default = DARK_THEME];</code>
     */
    public Builder clearTextColormap() {
      bitField0_ = (bitField0_ & ~0x00000020);
      textColormap_ = 2;
      onChanged();
      return this;
    }

    private int speakerIndicationStyle_ = 1;
    /**
     * <pre>
     * A label that indicates which speaker is active.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle speaker_indication_style = 7 [default = NO_SPEAKER_INDICATION];</code>
     */
    public boolean hasSpeakerIndicationStyle() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * A label that indicates which speaker is active.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle speaker_indication_style = 7 [default = NO_SPEAKER_INDICATION];</code>
     */
    public com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle getSpeakerIndicationStyle() {
      @SuppressWarnings("deprecation")
      com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle result = com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle.valueOf(speakerIndicationStyle_);
      return result == null ? com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle.NO_SPEAKER_INDICATION : result;
    }
    /**
     * <pre>
     * A label that indicates which speaker is active.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle speaker_indication_style = 7 [default = NO_SPEAKER_INDICATION];</code>
     */
    public Builder setSpeakerIndicationStyle(com.google.audio.asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000040;
      speakerIndicationStyle_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A label that indicates which speaker is active.
     * </pre>
     *
     * <code>optional .asr.TranscriptionResultFormatterOptions.SpeakerIndicationStyle speaker_indication_style = 7 [default = NO_SPEAKER_INDICATION];</code>
     */
    public Builder clearSpeakerIndicationStyle() {
      bitField0_ = (bitField0_ & ~0x00000040);
      speakerIndicationStyle_ = 1;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:asr.TranscriptionResultFormatterOptions)
  }

  // @@protoc_insertion_point(class_scope:asr.TranscriptionResultFormatterOptions)
  private static final com.google.audio.asr.TranscriptionResultFormatterOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.audio.asr.TranscriptionResultFormatterOptions();
  }

  public static com.google.audio.asr.TranscriptionResultFormatterOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<TranscriptionResultFormatterOptions>
      PARSER = new com.google.protobuf.AbstractParser<TranscriptionResultFormatterOptions>() {
    @java.lang.Override
    public TranscriptionResultFormatterOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TranscriptionResultFormatterOptions(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TranscriptionResultFormatterOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TranscriptionResultFormatterOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.audio.asr.TranscriptionResultFormatterOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

